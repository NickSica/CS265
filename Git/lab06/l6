Q1)
A list is a sequence of elements where consecutive elements are linked together with a pointer and the last element points to null.
The stack is a last in first out data structure where items are pushed to it and the last item can be popped off of it and used.
A queue is a first in first out data structure where items can be added to it and taken out in the order they were added. It's useful for function calls and the like.
A dictionary is a set of key/value pairs where the key can be used to gain the value from the dictionary.

Q2)
log(n) times because the search at most will have to split the search in half so many times and two raised to that value should give you close to the number of items.

Q3)
n times because it will have to look through every single element of the array at the very worst.

Q4)
When the programmer knows the value will be in the first few or the last few values of the object being searched. It would be faster than a binary search which would be close to its worst case.

Q5)
37 82 27 63 73 27 75 55 45 8 *84* 93 98 98
27 27 8 *37* 82 63 73 75 55 45 84 *93* 93 98
8 *27* 27 37 63 73 75 55 45 *82* 84 93 *93* 98
8 27 27 37 55 45 *63* 73 75 82 84 93 93 98
8 27 27 37 45 *55* 63 *73* 75 82 84 93 93 98

Q6)
data        |  3   24  06 
next pointer|  24  06  NULL

Q7)           
data			|  13   28  24  3
next pointer|  28   24  3   None

Q8)
s is being reassigned to a char pointer pointing to a different place in memory than buffer, unlike the first time around where they pointed to the same place in memory. Modifying s will not modify buffer since it is allocating a different area of memory than buffer.

Q9)
[[NULL, NULL, NULL], [NULL, NULL, NULL], [NULL, NULL, NULL], ["Bob", 38, ["Cos", 86, NULL]], ["Vera", 99, ["Nash", 11, ["Kate", 28, ["Jaga", 24, NULL]]]], ["Jesse", 78, NULL]]

Q10)
int find(char *key, int *p_ans)
{
	entry *p, *q;
	int retVal = 0;
	int h = hash(s);
	for(p = table[h]; p != NULL; p = q)
	{
		q = p -> next;
		if(!strcmp(key, p -> key))
		{
			retVal = 1;
			p -> val = *p_ans;
		}
	}
	return retVal;
}
